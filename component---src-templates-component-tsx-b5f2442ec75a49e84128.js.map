{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Layout.tsx","webpack:///./src/templates/component.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0___default","a","createContext","prop_types__WEBPACK_IMPORTED_MODULE_1___default","object","string","isRequired","func","m","module","exports","__webpack_require__","default","ProdPageRenderer","_ref","location","pageResources","_loader__WEBPACK_IMPORTED_MODULE_3__","getResourcesForPathname","pathname","createElement","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","propTypes","shape","__webpack_exports__","i","125","e","t","n","d","u","r","c","l","o","arguments","length","Array","call","apply","this","concat","state","isOpen","prototype","render","_this$props","props","title","data","site","siteMetadata","children","react__WEBPACK_IMPORTED_MODULE_1__","reactstrap__WEBPACK_IMPORTED_MODULE_3__","fixed","dark","color","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","className","b","navbar","href","style","marginTop","Component","126","128","227","y","cleanDocletValue","str","trim","replace","extractMarkdown","description","childMarkdownRemark","html","ComponentTemplate","renderProp","prop","componentName","defaultValue","name","required","typeInfo","_this","renderType","id","react__WEBPACK_IMPORTED_MODULE_3__","key","marginBottom","dangerouslySetInnerHTML","__html","paddingLeft","type","value","_this2","metadata","componentPages","_components_Layout__WEBPACK_IMPORTED_MODULE_6__","gatsby__WEBPACK_IMPORTED_MODULE_4__","displayName","composes","fontStyle","fontSize","map","p","join","obj","_this3","getDisplayTypeName","doclets","renderObject","lodash_transform__WEBPACK_IMPORTED_MODULE_5___default","val","simpleType","child","JSON","stringify","reduce","current","list","item","isValidElement","cloneElement","renderEnum","enumType","enumValues","typeName","query"],"mappings":"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","file":"component---src-templates-component-tsx-b5f2442ec75a49e84128.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, { withPrefix, push, replace, navigateTo } from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  push,\n  replace,\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.NODE_ENV !== `production`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathname(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import * as React from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport { Container, Nav, NavItem, NavLink, Navbar } from \"reactstrap\";\nimport \"../css/bootstrap.scss\";\nimport \"../css/prism-theme.scss\";\n\nexport interface SiteData {\n    siteMetadata: {\n        componentPages: Array<{\n            codeSandboxId: string;\n            displayName: string;\n            path: string;\n        }>;\n        title: string;\n        version: string;\n    }\n}\n\nexport const layoutSiteFragment = graphql`\n    fragment Layout_Site on Site {\n        siteMetadata {\n            componentPages {\n                codeSandboxId\n                displayName\n                path\n            }\n            title\n            version\n        }\n    }\n`;\n\nexport interface LayoutData {\n    site: SiteData;\n}\n\nexport interface LayoutProps {\n    data: LayoutData;\n    location: any;\n}\n\nexport interface LayoutState {\n    isOpen: boolean;\n}\n\nexport default class extends React.Component<LayoutProps, LayoutState> {\n    state = {\n        isOpen: false\n    };\n\n    render() {\n        const {\n            data : { site : { siteMetadata : { title } } },\n            children\n        } = this.props;\n\n        return (\n            <div>\n                <Navbar\n                    fixed=\"top\"\n                    dark\n                    color=\"dark\"\n                >\n                    <Container>\n                        <Link\n                            to=\"/\"\n                            className=\"navbar-brand mr-auto\"\n                        >\n                            { title }\n                        </Link>\n                        <Nav navbar>\n                            <NavItem>\n                                <NavLink href=\"https://github.com/LKay/react-transition-replace\">\n                                    <i className=\"fab fa-fw fa-github fa-lg\" />\n                                </NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Container>\n                </Navbar>\n                <Container style={ { marginTop: \"75px\" } }>\n                    { children }\n                </Container>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport { Container, Button } from \"reactstrap\";\nimport transform from \"lodash.transform\";\nimport Layout from \"../components/Layout\";\n\nfunction displayObj(obj) {\n    return JSON.stringify(obj, null, 2).replace(/\"|'/g, '');\n}\n\nlet cleanDocletValue = (str) =>\n    str\n        .trim()\n        .replace(/^\\{/, '')\n        .replace(/\\}$/, '');\n\nconst extractMarkdown = ({ description }) =>\n    description &&\n    description.childMarkdownRemark &&\n    description.childMarkdownRemark.html;\n\nclass ComponentTemplate extends React.Component<any> {\n    render() {\n        const { data, location } = this.props;\n        const { metadata } = data;\n        const { componentPages } = data.site.siteMetadata;\n        return (\n            <Layout\n                data={data}\n                location={location}\n            >\n                <div>\n                    <div className=\"d-flex flex-row align-items-center mb-4\">\n                        <Link\n                            to=\"/#Components\"\n                            className=\"btn btn-outline-dark\"\n                        >\n                            <i className=\"fas fa-fw fa-arrow-left\" />\n                        </Link>\n\n                        <h1\n                            id={metadata.displayName}\n                            className=\"mb-0 ml-3\"\n                        >\n                            {metadata.displayName}\n                        </h1>\n                    </div>\n\n                    <div\n                        dangerouslySetInnerHTML={{ __html: extractMarkdown(metadata) }}\n                    />\n\n                    <div className=\"grid\">\n                        <h2>\n                            <div>Props</div>\n                            {metadata.composes && (\n                                <small style={{ fontStyle: 'italic', fontSize: '70%' }}>\n                                    Accepts all props from{' '}\n                                    {metadata.composes\n                                        .map(p => `<${p.replace('./', '')}>`)\n                                        .join(', ')}{' '}\n                                    unless otherwise noted.\n                                </small>\n                            )}\n                        </h2>\n                        {metadata.props.map(p => this.renderProp(p, metadata.displayName))}\n                    </div>\n                </div>\n            </Layout>\n        );\n    }\n\n    renderProp = (prop, componentName) => {\n        const { defaultValue, name, required } = prop;\n        let typeInfo = this.renderType(prop);\n        let id = `${componentName}-prop-${name}`;\n\n        return (\n            <section key={name}>\n                <h3 id={id} style={{ marginTop: '1.5rem', marginBottom: '0.5rem' }}>\n                    <a href={`#${id}`}>\n                        <code>{name}</code>\n                    </a>\n                </h3>\n                <div dangerouslySetInnerHTML={{ __html: extractMarkdown(prop) }} />\n\n                <div style={{ paddingLeft: 0 }}>\n                    <div>\n                        {'type: '}\n                        {typeInfo && typeInfo.type === 'pre' ? (\n                            typeInfo\n                        ) : (\n                            <code>{typeInfo}</code>\n                        )}\n                    </div>\n                    {required && <div>required</div>}\n                    {defaultValue && (\n                        <div>\n                            default: <code>{defaultValue.value.trim()}</code>\n                        </div>\n                    )}\n                </div>\n            </section>\n        );\n    };\n\n    renderType(prop) {\n        let type = prop.type || {};\n        let name = getDisplayTypeName(type.name);\n        let doclets = prop.doclets || {};\n\n        switch (name) {\n            case 'node':\n                return 'any';\n            case 'function':\n                return 'Function';\n            case 'elementType':\n                return 'ReactClass<any>';\n            case 'dateFormat':\n                return 'string | (date: Date, culture: ?string, localizer: Localizer) => string';\n            case 'dateRangeFormat':\n                return '(range: { start: Date, end: Date }, culture: ?string, localizer: Localizer) => string';\n            case 'object':\n            case 'Object':\n                if (type.value)\n                    return (\n                        <pre className=\"shape-prop\">\n              {displayObj(renderObject(type.value))}\n            </pre>\n                    );\n\n                return name;\n            case 'union':\n                return type.value.reduce((current, val, i, list) => {\n                    val = typeof val === 'string' ? { name: val } : val;\n                    let item = this.renderType({ type: val });\n\n                    if (React.isValidElement(item)) {\n                        item = React.cloneElement(item, { key: i });\n                    }\n\n                    current = current.concat(item);\n\n                    return i === list.length - 1 ? current : current.concat(' | ');\n                }, []);\n            case 'array':\n            case 'Array': {\n                let child = this.renderType({ type: type.value });\n\n                return (\n                    <span>\n            {'Array<'}\n                        {child}\n                        {'>'}\n          </span>\n                );\n            }\n            case 'enum':\n                return this.renderEnum(type);\n            case 'custom':\n                return cleanDocletValue(doclets.type || name);\n            default:\n                return name;\n        }\n    }\n\n    renderEnum(enumType) {\n        const enumValues = enumType.value || [];\n        return <code>{enumValues.join(' | ')}</code>;\n    }\n}\n\nfunction getDisplayTypeName(typeName) {\n    if (typeName === 'func') {\n        return 'function';\n    } else if (typeName === 'bool') {\n        return 'boolean';\n    } else if (typeName === 'object') {\n        return 'Object';\n    }\n\n    return typeName;\n}\n\nfunction renderObject(props) {\n    return transform(\n        props,\n        (obj, val, key) => {\n            obj[val.required ? key : key + '?'] = simpleType(val);\n        },\n        {}\n    );\n}\n\nfunction simpleType(prop) {\n    let type = prop.type || {};\n    let name = getDisplayTypeName(type.name);\n    let doclets = prop.doclets || {};\n\n    switch (name) {\n        case 'node':\n            return 'any';\n        case 'function':\n            return 'Function';\n        case 'elementType':\n            return 'ReactClass<any>';\n        case 'object':\n        case 'Object':\n            if (type.value) return renderObject(type.value);\n            return name;\n        case 'array':\n        case 'Array': {\n            let child = simpleType({ type: type.value });\n\n            return 'Array<' + child + '>';\n        }\n        case 'custom':\n            return cleanDocletValue(doclets.type || name);\n        default:\n            return name;\n    }\n}\n\nexport const query = graphql`\n    query ComponentMetadata($displayName: String!) {\n        site {\n            ...Layout_Site\n        }\n        metadata: componentMetadata(displayName: { eq: $displayName }) {\n            displayName\n            composes\n            description: childComponentDescription {\n                childMarkdownRemark {\n                    html\n                }\n            }\n            props {\n                name\n                required\n                type {\n                    name\n                    value\n                    raw\n                }\n                defaultValue {\n                    value\n                    computed\n                }\n                description: childComponentDescription {\n                    childMarkdownRemark {\n                        html\n                    }\n                }\n                doclets\n            }\n        }\n    }\n`;\n\nexport default ComponentTemplate;\n"],"sourceRoot":""}